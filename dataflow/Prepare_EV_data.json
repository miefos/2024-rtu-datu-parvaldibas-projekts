{
	"name": "Prepare_EV_data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "RawData",
						"type": "DatasetReference"
					},
					"name": "rawData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "FinalData",
						"type": "DatasetReference"
					},
					"name": "finalData"
				}
			],
			"transformations": [
				{
					"name": "groupByUnpivot"
				},
				{
					"name": "formatNumbers"
				},
				{
					"name": "groupByPivot"
				}
			],
			"scriptLines": [
				"source(output(",
				"          year as string,",
				"          el_auto_registr as string,",
				"          benzina_auto_registr as string,",
				"          {dizela_auto registr} as string,",
				"          {benzina_cena_yearly _avg} as string,",
				"          iedziv_skaits_gada_sak as string,",
				"          IKP_uz_1_iedz as string,",
				"          vid_aritm_men_ienak as string,",
				"          visp_apmier_ar_dzivi as string,",
				"          pas_parvad_tramv_Riga as string,",
				"          pas_parvad_trol_Riga as string,",
				"          pas_parv_vilc as string,",
				"          el_cena_kWh_max as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> rawData",
				"rawData unpivot(output(",
				"          {Mainīgais} as string,",
				"          {Vērtība} as string",
				"     ),",
				"     ungroupBy(year),",
				"     lateral: false,",
				"     ignoreNullPivots: false) ~> groupByUnpivot",
				"groupByUnpivot derive({Vērtība} = toDouble(replace(replace({Vērtība}, ',', ''), ' ', ''))) ~> formatNumbers",
				"formatNumbers pivot(groupBy({Mainīgais}),",
				"     pivotBy(year),",
				"     {} = first({Vērtība}),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> groupByPivot",
				"groupByPivot sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat(substring(toString(currentUTC()), 0, 4), '-',  ",
				"       substring(toString(currentUTC()), 5, 2), '-', ",
				"       substring(toString(currentUTC()), 8, 2), ' ',",
				"       substring(toString(currentUTC()), 11, 2), ':', ",
				"       substring(toString(currentUTC()), 14, 2), ':',  ",
				"       substring(toString(currentUTC()), 17, 2),",
				"       '_ev_data')",
				")],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     partitionBy('hash', 1)) ~> finalData"
			]
		}
	}
}